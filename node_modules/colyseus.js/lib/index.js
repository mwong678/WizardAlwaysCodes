'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _websocket = require('websocket.js');

var _websocket2 = _interopRequireDefault(_websocket);

var _msgpackLite = require('msgpack-lite');

var _msgpackLite2 = _interopRequireDefault(_msgpackLite);

var _protocol = require('./protocol');

var _protocol2 = _interopRequireDefault(_protocol);

var _room = require('./room');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Colyseus = function (_WebSocketClient) {
  _inherits(Colyseus, _WebSocketClient);

  function Colyseus(url) {
    var protocols = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Colyseus);

    var _this = _possibleConstructorReturn(this, (Colyseus.__proto__ || Object.getPrototypeOf(Colyseus)).call(this, url, protocols, options));

    _this.binaryType = "arraybuffer";

    _this.rooms = {};

    _this._enqueuedCalls = [];

    return _this;
  }

  _createClass(Colyseus, [{
    key: 'onOpenCallback',
    value: function onOpenCallback(event) {

      if (this._enqueuedCalls.length > 0) {

        for (var i = 0; i < this._enqueuedCalls.length; i++) {
          var _enqueuedCalls$i = _slicedToArray(this._enqueuedCalls[i], 2);

          var method = _enqueuedCalls$i[0];
          var args = _enqueuedCalls$i[1];


          this[method].apply(this, args);
        }
      }
    }
  }, {
    key: 'send',
    value: function send(data) {

      if (this.ws.readyState == WebSocket.OPEN) {

        return _get(Colyseus.prototype.__proto__ || Object.getPrototypeOf(Colyseus.prototype), 'send', this).call(this, _msgpackLite2.default.encode(data));
      } else {

        // WebSocket not connected.
        // Enqueue data to be sent when readyState == OPEN
        this._enqueuedCalls.push(['send', [data]]);
      }
    }
  }, {
    key: 'join',
    value: function join(roomName, options) {

      if (!this.rooms[roomName]) {

        this.rooms[roomName] = (0, _room.createRoom)(this, roomName);
      }

      this.send([_protocol2.default.JOIN_ROOM, roomName, options || {}]);

      return this.rooms[roomName];
    }

    /**
     * @override
     */

  }, {
    key: 'onMessageCallback',
    value: function onMessageCallback(event) {

      var message = _msgpackLite2.default.decode(new Uint8Array(event.data));

      if (typeof message[0] === "number") {

        var roomId = message[1];

        if (message[0] == _protocol2.default.USER_ID) {

          this.id = roomId;

          if (this.listeners['onopen']) this.listeners['onopen'].apply(null);

          return true;
        } else if (message[0] == _protocol2.default.JOIN_ROOM) {

          // joining room from room name:
          // when first room message is received, keep only roomId association on `rooms` object
          if (this.rooms[message[2]]) {

            this.rooms[roomId] = this.rooms[message[2]];

            delete this.rooms[message[2]];
          }

          this.rooms[roomId].id = roomId;

          this.rooms[roomId].emit('join');

          return true;
        } else if (message[0] == _protocol2.default.JOIN_ERROR) {

          var room = this.rooms[roomId];

          delete this.rooms[roomId];

          room.emit('error', message[2]);

          return true;
        } else if (message[0] == _protocol2.default.LEAVE_ROOM) {

          this.rooms[roomId].emit('leave');

          return true;
        } else if (message[0] == _protocol2.default.ROOM_STATE) {

          var state = message[2],
              remoteCurrentTime = message[3],
              remoteElapsedTime = message[4];

          this.rooms[roomId].setState(state, remoteCurrentTime, remoteElapsedTime);

          return true;
        } else if (message[0] == _protocol2.default.ROOM_STATE_PATCH) {

          var patches = message[2];

          // calculate room ping
          if (!this.rooms[roomId].ping) {
            this.rooms[roomId].ping;
          }

          this.rooms[roomId].patch(patches);

          return true;
        } else if (message[0] == _protocol2.default.ROOM_DATA) {

          this.rooms[roomId].emit('data', message[2]);

          message = [message[2]];
        }
      }

      if (this.listeners['onmessage']) this.listeners['onmessage'].apply(null, message);
    }
  }]);

  return Colyseus;
}(_websocket2.default);

module.exports = Colyseus;