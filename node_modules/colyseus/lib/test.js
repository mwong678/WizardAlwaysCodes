var express = require('express');
var cluster = require('cluster');
var net = require('net');
var WebSocketServer = require('uws').Server;
var port = 8080;
var numWorkers = require('os').cpus().length;
if (cluster.isMaster) {
    console.log("Master process:", process.pid);
    // This stores our workers. We need to keep them to be able to reference
    // them based on source IP address. It's also useful for auto-restart,
    // for example.
    var workers = [];
    // Helper function for spawning worker at index 'i'.
    var spawn = function (i) {
        workers[i] = cluster.fork();
        // Optional: Restart worker on exit
        workers[i].on('exit', function (code, signal) {
            console.log('respawning worker', i);
            spawn(i);
        });
    };
    // Spawn workers.
    for (var i = 0; i < numWorkers; i++) {
        spawn(i);
    }
    var worker_index = function (ip, len) {
        var s = '';
        for (var i = 0, _len = ip.length; i < _len; i++) {
            if (!isNaN(ip[i])) {
                s += ip[i];
            }
        }
        return Number(s) % len;
    };
    // Create the outside facing server listening on our port.
    var server = net.createServer({ pauseOnConnect: true }, function (connection) {
        var worker = workers[worker_index(connection.remoteAddress, numWorkers)];
        console.log("first connection.");
        worker.send('sticky-session:connection', connection);
    }).listen(port);
}
else {
    console.log("Worker process:", process.pid);
    // Note we don't use a port here because the master listens on it for us.
    var app = new express();
    // Don't expose our internal server to the outside.
    var server_1 = app.listen(0, 'localhost');
    var wss = new WebSocketServer({ server: server_1 });
    wss.on('connection', function (socket) {
        console.log("successfully connected to worker.");
        socket.on('message', function (msg) {
            console.log("message", process.pid, msg);
        });
        socket.send("you're welcome");
    });
    // Listen to messages sent from the master. Ignore everything else.
    process.on('message', function (message, connection) {
        if (message !== 'sticky-session:connection') {
            return;
        }
        console.log("redirected connection");
        // Emulate a connection event on the server by emitting the
        // event with the connection the master sent us.
        server_1.emit('connection', connection);
        connection.resume();
    });
}
