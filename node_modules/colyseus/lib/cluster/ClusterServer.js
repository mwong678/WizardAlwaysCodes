"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var cluster = require("cluster");
var Server_1 = require("../Server");
var Master_1 = require("./Master");
var Worker_1 = require("./Worker");
var ClusterMessage;
(function (ClusterMessage) {
    ClusterMessage[ClusterMessage["REDIRECT"] = 0] = "REDIRECT";
    ClusterMessage[ClusterMessage["CREATE_ROOM"] = 1] = "CREATE_ROOM";
})(ClusterMessage = exports.ClusterMessage || (exports.ClusterMessage = {}));
;
var ClusterServer = (function (_super) {
    __extends(ClusterServer, _super);
    function ClusterServer(options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        if (cluster.isMaster) {
            _this.server = Master_1.setupMaster();
        }
        return _this;
    }
    ClusterServer.prototype.listen = function (port, hostname, backlog, listeningListener) {
        if (cluster.isMaster) {
            this.server.listen(port, hostname, backlog, listeningListener);
        }
    };
    ClusterServer.prototype.attach = function (options) {
        if (!cluster.isWorker) {
            console.warn("ClusterServer#attach method should only be called from a worker process.");
            return;
        }
        if (options.server) {
            // Don't expose internal server to the outside.
            this.server = Worker_1.setupWorker(options.server.listen(0, "localhost"));
            options.server = this.server;
        }
        _super.prototype.attach.call(this, options);
    };
    return ClusterServer;
}(Server_1.Server));
exports.ClusterServer = ClusterServer;
