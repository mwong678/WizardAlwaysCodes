"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var memshared = require("memshared");
var uws_1 = require("uws");
var Protocol_1 = require("../Protocol");
function handleUpgrade(wss, socket, message) {
    var code = message[0], request = message[1], head = message[2];
    request.connection = socket;
    // handle upgrade of the living web socket connection again,
    // in the worker node
    wss.handleUpgrade(request, socket, head, function (client) {
        wss.emit('connection', client, request);
    });
    socket.resume();
    return;
}
exports.handleUpgrade = handleUpgrade;
function setupWorker(server, matchMaker) {
    var wss = new uws_1.Server({ server: server });
    process.on('message', function (message, socket) {
        var roomNameOrId = message[1];
        var joinOptions = message[2];
        var allowCreateRoom = (message[0] === Protocol_1.Protocol.CREATE_ROOM);
        if (message[0] === Protocol_1.Protocol.PASS_HTTP_SOCKET) {
            server.emit('connection', socket);
            socket.resume();
            return;
        }
        else if (message[0] === Protocol_1.Protocol.PASS_WEBSOCKET) {
            handleUpgrade(wss, socket, message);
            return;
        }
        else if (allowCreateRoom || message[0] === Protocol_1.Protocol.JOIN_ROOM) {
            matchMaker.onJoinRoomRequest(roomNameOrId, joinOptions, allowCreateRoom, function (err, room) {
                var joinRoomResponse;
                if (err) {
                    joinRoomResponse = [Protocol_1.Protocol.JOIN_ERROR, roomNameOrId, err];
                }
                else {
                    joinRoomResponse = [Protocol_1.Protocol.JOIN_ROOM, room.roomId];
                }
                // send response back to match-making process.
                memshared.get("matchmaking_process", function (err, matchMakingPid) {
                    console.log("send back to matchmaking process...", matchMakingPid);
                    process.send([matchMakingPid, joinOptions.clientId, joinRoomResponse]);
                });
            });
        }
    });
    return server;
}
exports.setupWorker = setupWorker;
